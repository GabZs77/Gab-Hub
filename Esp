repeat task.wait(0.25) until game:IsLoaded(); 
getgenv().Image = "rbxassetid://7229442422"; -- put a asset id in here to make it work 
getgenv().ToggleUI = "E" -- This where you can Toggle the Fluent ui library 

task.spawn(function() 
    if not getgenv().LoadedMobileUI == true then getgenv().LoadedMobileUI = true 
        local OpenUI = Instance.new("ScreenGui"); 
        local ImageButton = Instance.new("ImageButton"); 
        local UICorner = Instance.new("UICorner"); 
        OpenUI.Name = "OpenUI"; 
        OpenUI.Parent = game:GetService("CoreGui"); 
        OpenUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling; 
        ImageButton.Parent = OpenUI; 
        ImageButton.BackgroundColor3 = Color3.fromRGB(105,105,105); 
        ImageButton.BackgroundTransparency = 0.8 
        ImageButton.Position = UDim2.new(0.9,0,0.1,0); 
        ImageButton.Size = UDim2.new(0,50,0,50); 
        ImageButton.Image = getgenv().Image; 
        ImageButton.Draggable = true; 
        ImageButton.Transparency = 1; 
        UICorner.CornerRadius = UDim.new(0,200); 
        UICorner.Parent = ImageButton; 
        ImageButton.MouseButton1Click:Connect(function() 
            game:GetService("VirtualInputManager"):SendKeyEvent(true,getgenv().ToggleUI,false,game); 
        end) 
    end 
end) 
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))() 

local Window = Fluent:CreateWindow({ 
    Title = "Blessed Hub " .. Fluent.Version, 
    SubTitle = "", 
    TabWidth = 160, 
    Size = UDim2.fromOffset(830, 525), 
    Resize = true, 
    MinSize = Vector2.new(470, 380), 
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely 
    Theme = "Darker", 
    MinimizeKey = Enum.KeyCode.E -- Used when theres no MinimizeKeybind 
}) 

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional 
local Tabs = { 
    Main = Window:AddTab({ Title = "Main", Icon = "home" }), 
    Player = Window:AddTab({ Title = "Player", Icon = "user" }), 
    Visuals = Window:AddTab({ Title = "Visuals", Icon = "bluetooth" }) 
 } 

-- Variáveis globais 
local SelectedPlayer = nil 
local PlayerService = game:GetService("Players") 
local Mouse = PlayerService.LocalPlayer:GetMouse() 
local ToggleActive = false 
local ColorChangeActive = false 
local AutoEquipSkins = false 
local SavedSkinName = "" 

-- Função para buscar jogador por DisplayName ou Username 
local function GetPlayerByName(query) 
    for _, player in ipairs(PlayerService:GetPlayers()) do 
        if player.Name:lower():sub(1, #query) == query:lower() or  
           player.DisplayName:lower():sub(1, #query) == query:lower() then 
            return player 
        end 
    end 
    return nil 
end 

-- Função para copiar a skin do jogador 
local function CopyPlayerSkin(player) 
    if player and player.Character then 
        local args = { 
            [1] = player.Character.Humanoid.HumanoidDescription, 
            [2] = true 
        } 
        game:GetService("ReplicatedStorage").Events.TryBuy.Try:FireServer(unpack(args)) 
    end 
end 

-- Função para equipar automaticamente a skin de todos os jogadores no servidor 
local function AutoEquipAllSkins() 
    task.spawn(function() 
        while AutoEquipSkins do 
            for _, player in ipairs(PlayerService:GetPlayers()) do 
                if player ~= PlayerService.LocalPlayer then 
                    CopyPlayerSkin(player) 
                end 
            end 
            task.wait(1) -- Aguarda 1 segundo antes de copiar novamente 
        end 
    end) 
end 

-- Função para alterar continuamente a cor do personagem rapidamente 
local function StartColorChange() 
    task.spawn(function() 
        while ColorChangeActive do 
            local player = PlayerService.LocalPlayer 
            if player and player.Character and player.Character:FindFirstChild("Humanoid") then 
                local newColor = Color3.new(math.random(), math.random(), math.random()) 
                local args = { 
                    [1] = { 
                        ["BodyColor"] = { 
                            ["HeadColor"] = newColor, 
                            ["TorsoColor"] = newColor, 
                            ["LeftArmColor"] = newColor, 
                            ["RightArmColor"] = newColor, 
                            ["LeftLegColor"] = newColor, 
                            ["RightLegColor"] = newColor 
                        } 
                    } 
                } 
                game:GetService("ReplicatedStorage").BloxbizRemotes.CatalogOnApplyToRealHumanoid:FireServer(unpack(args)) 
            end 
            task.wait(0.1) -- Mudança rápida de cor (0,1 segundo) 
        end 
    end) 
end 

-- Input para selecionar jogador 
local PlayerInput = Tabs.Main:AddInput("PlayerInput", { 
    Title = "Nome ou Display Name", 
    Placeholder = "Digite as iniciais...", 
    Callback = function(value) 
        SelectedPlayer = GetPlayerByName(value) 
    end 
}) 

-- Toggle para visualizar o jogador 
local ViewToggle = Tabs.Main:AddToggle("ViewToggle", { 
    Title = "Visualizar Jogador", 
    Default = false, 
    Callback = function(state) 
        if SelectedPlayer and SelectedPlayer.Character and SelectedPlayer.Character:FindFirstChild("HumanoidRootPart") then 
            if state then 
                game.Workspace.CurrentCamera.CameraSubject = SelectedPlayer.Character.Humanoid 
            else 
                game.Workspace.CurrentCamera.CameraSubject = PlayerService.LocalPlayer.Character.Humanoid 
            end 
        else 
            Fluent:Notify({ Title = "Erro", Content = "Nenhum jogador válido selecionado." }) 
        end 
    end 
}) 

Tabs.Main:AddButton({ 
    Title = "Teleportar até Jogador", 
    Description = "Teleporta você até o jogador selecionado.", 
    Callback = function() 
        if SelectedPlayer and SelectedPlayer.Character and SelectedPlayer.Character:FindFirstChild("HumanoidRootPart") then 
            local playerRoot = PlayerService.LocalPlayer.Character and PlayerService.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") 
            local targetRoot = SelectedPlayer.Character.HumanoidRootPart 

            if playerRoot then 
                playerRoot.CFrame = targetRoot.CFrame 
                Fluent:Notify({ Title = "Teleporte", Content = "Teleportado para " .. SelectedPlayer.Name, Duration = 8 }) 
            else 
                Fluent:Notify({ Title = "Erro", Content = "HumanoidRootPart não encontrado.", Duration = 8 }) 
            end 
        else 
            Fluent:Notify({ Title = "Erro", Content = "Nenhum jogador válido selecionado.", Duration = 8 }) 
        end 
    end 
}) 

-- Botão para copiar a skin do jogador selecionado 
Tabs.Main:AddButton({ 
    Title = "Copiar Skin", 
    Description = "Copie a skin do jogador selecionado.", 
    Callback = function() 
        if SelectedPlayer then 
            CopyPlayerSkin(SelectedPlayer) 
        else 
            Fluent:Notify({ Title = "Erro", Content = "Nenhum jogador válido selecionado." }) 
        end 
    end 
}) 

-- Toggle para copiar a skin ao clicar no jogador 
local ClickCopyToggle = Tabs.Main:AddToggle("ClickCopyToggle", { 
    Title = "Copiar Skin ao Clicar", 
    Default = false, 
    Callback = function(state) 
        ToggleActive = state 
    end 
}) 

-- Detecta clique e copia a skin do jogador clicado 
Mouse.Button1Down:Connect(function() 
    if ToggleActive then 
        local target = Mouse.Target 
        if target and target.Parent:IsA("Model") and PlayerService:GetPlayerFromCharacter(target.Parent) then 
            local player = PlayerService:GetPlayerFromCharacter(target.Parent) 
            CopyPlayerSkin(player) 
        end 
    end 
end) 

-- Toggle para mudar a cor do personagem continuamente 
local ColorChangeToggle = Tabs.Main:AddToggle("ColorChangeToggle", { 
    Title = "Mudar Cor do Personagem", 
    Default = false, 
    Callback = function(state) 
        ColorChangeActive = state 
        if state then 
            StartColorChange() 
        end 
    end 
}) 

-- Função para equipar skins continuamente 
local function AutoEquipAllSkins() 
    task.spawn(function() 
        while AutoEquipSkins do 
            for _, player in ipairs(PlayerService:GetPlayers()) do 
                if player ~= PlayerService.LocalPlayer then 
                    CopyPlayerSkin(player) 
                    task.wait(0.1) -- Troca rápida de skins 
                end 
            end 
        end 
    end) 
end 

-- Toggle para equipar skins continuamente 
local AutoEquipToggle = Tabs.Main:AddToggle("AutoEquipToggle", { 
    Title = "Equipar Skins Continuamente", 
    Default = false, 
    Callback = function(state) 
        AutoEquipSkins = state 
        if state then 
            AutoEquipAllSkins() 
            Fluent:Notify({ Title = "Equipar Skins", Content = "Equipando skins...", Duration = 8 }) 
        else 
            Fluent:Notify({ Title = "Equipar Skins", Content = "Parado.", Duration = 8 }) 
        end 
    end 
}) 

-- Input para definir o nome da skin salva 
local SkinNameInput = Tabs.Main:AddInput("SkinNameInput", { 
    Title = "Nome da Skin", 
    Placeholder = "Digite o nome...", 
    Callback = function(value) 
        SavedSkinName = value 
    end 
}) 

-- Botão para salvar a skin 
Tabs.Main:AddButton({ 
    Title = "Salvar Skin", 
    Description = "Salva a skin atual.", 
    Callback = function() 
        if SavedSkinName ~= "" then 
            local args = { "create", SavedSkinName } 
            game:GetService("ReplicatedStorage").AvatarEditor.RemoteEvent:FireServer(unpack(args)) 
            Fluent:Notify({ Title = "Salvar Skin", Content = "Skin salva: " .. SavedSkinName, Duration = 8 }) 
        else 
            Fluent:Notify({ Title = "Erro", Content = "Defina um nome para salvar.", Duration = 8 }) 
        end 
    end 
}) 

local SprintToggle = Tabs.Player:AddToggle("SprintToggle", { 
    Title = "Sprint", 
    Description = "Ativa/desativa o sprint", 
    Default = false, 
    Callback = function(value) 
        if value then 
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 24 
            print("Sprint ativado: WalkSpeed = 24") 
        else 
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16 
            print("Sprint desativado: WalkSpeed = 16") 
        end 
    end 
}) 

-- Campo de input para a velocidade 
local SpeedInput = Tabs.Player:AddInput("SpeedInput", { 
    Title = "WalkSpeed (16 é o padrão)", 
    Description = "Digite o valor desejado", 
    Placeholder = "Número aqui", 
    Type = "number", 
    Callback = function(value) 
        value = tonumber(value) -- Converte o valor para número 
        if value then 
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = value 
            print("Velocidade aplicada:", value) 
        else 
            print("Por favor, insira um número válido.") 
        end 
    end 
}) 

local TeleportService = game:GetService("TeleportService") 
local PlaceId = game.PlaceId 
local Player = game.Players.LocalPlayer 

-- Botão para reentrar no jogo 
Tabs.Player:AddButton({ 
    Title = "Reentrar no Jogo", 
    Description = "Clique para reentrar no jogo atual.", 
    Callback = function() 
        TeleportService:Teleport(PlaceId, Player) 
    end 
}) 

local PlayerService = game:GetService("Players") 
local RunService = game:GetService("RunService") 
local SelectedPlayer = nil 
local HeadSitActive = false 
local ViewPlayerActive = false 
local BangActive = false 

-- Função para buscar jogador por DisplayName ou Username 
local function GetPlayerByName(query) 
    for _, player in ipairs(PlayerService:GetPlayers()) do 
        if player.Name:lower():sub(1, #query) == query:lower() or  
           player.DisplayName:lower():sub(1, #query) == query:lower() then 
            return player 
        end 
    end 
    return nil 
end 

-- Função para ativar/desativar o HeadSit 
local function ToggleHeadSit(state) 
    if state then 
        if SelectedPlayer and SelectedPlayer.Character and SelectedPlayer.Character:FindFirstChild("Head") then 
            HeadSitActive = true 
            Fluent:Notify({ Title = "HeadSit", Content = "Sentando na cabeça de " .. SelectedPlayer.Name }) 

            local playerRoot = PlayerService.LocalPlayer.Character and PlayerService.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") 
            local humanoid = PlayerService.LocalPlayer.Character and PlayerService.LocalPlayer.Character:FindFirstChild("Humanoid") 

            if playerRoot and humanoid then 
                humanoid.Sit = true -- Coloca o personagem na posição de "sentado" 

                -- Loop para manter o jogador sentado na cabeça do selecionado 
                RunService.RenderStepped:Connect(function() 
                    if HeadSitActive and SelectedPlayer and SelectedPlayer.Character and SelectedPlayer.Character:FindFirstChild("Head") then 
                        local targetHead = SelectedPlayer.Character.Head 
                        playerRoot.CFrame = targetHead.CFrame * CFrame.new(0, 1.5, 0) -- Ajusta para manter o personagem sentado 
                        playerRoot.Anchored = true 
                    end 
                end) 
            else 
                Fluent:Notify({ Title = "Erro", Content = "Personagem inválido para o HeadSit." }) 
            end 
        else 
            Fluent:Notify({ Title = "Erro", Content = "Nenhum jogador válido selecionado." }) 
        end 
    else 
        HeadSitActive = false 
        local playerRoot = PlayerService.LocalPlayer.Character and PlayerService.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") 
        local humanoid = PlayerService.LocalPlayer.Character and PlayerService.LocalPlayer.Character:FindFirstChild("Humanoid") 

        if playerRoot and humanoid then 
            playerRoot.Anchored = false 
            humanoid.Sit = false -- Volta o personagem ao controle normal 
        end 
        Fluent:Notify({ Title = "HeadSit", Content = "HeadSit desativado." }) 
    end 
end 

-- Função para ativar/desativar a visualização do jogador selecionado 
local function ToggleViewPlayer(state) 
    if state then 
        if SelectedPlayer and SelectedPlayer.Character and SelectedPlayer.Character:FindFirstChild("Humanoid") then 
            ViewPlayerActive = true 
            game.Workspace.CurrentCamera.CameraSubject = SelectedPlayer.Character.Humanoid 
            Fluent:Notify({ Title = "Visualizar Jogador", Content = "Visualizando " .. SelectedPlayer.Name }) 
        else 
            Fluent:Notify({ Title = "Erro", Content = "Nenhum jogador válido selecionado." }) 
        end 
    else 
        ViewPlayerActive = false 
        game.Workspace.CurrentCamera.CameraSubject = PlayerService.LocalPlayer.Character.Humanoid 
        Fluent:Notify({ Title = "Visualizar Jogador", Content = "Visualização desativada." }) 
    end 
end 

-- Input para selecionar o jogador 
local PlayerInput = Tabs.Player:AddInput("PlayerInput", { 
    Title = "Nome ou Display Name", 
    Placeholder = "Digite as iniciais...", 
    Callback = function(value) 
        SelectedPlayer = GetPlayerByName(value) 
    end 
}) 

-- Toggle para ativar/desativar o HeadSit 
local HeadSitToggle = Tabs.Player:AddToggle("HeadSitToggle", { 
    Title = "Ativar HeadSit", 
    Default = false, 
    Callback = function(state) 
        ToggleHeadSit(state) 
    end 
}) 

-- Toggle para ativar/desativar a visualização do jogador 
local ViewToggle = Tabs.Player:AddToggle("ViewToggle", { 
    Title = "Visualizar Jogador", 
    Default = false, 
    Callback = function(state) 
        ToggleViewPlayer(state) 
    end 
}) 

local Players = game:GetService("Players") 
local LocalPlayer = Players.LocalPlayer 
local SelectedPlayer 
local bangActive = false 

-- Função para encontrar o jogador com base nas iniciais, parte do nome ou display name 
local function findPlayerByName(query) 
    for _, player in pairs(Players:GetPlayers()) do 
        if player.Name:lower():find(query:lower()) or player.DisplayName:lower():find(query:lower()) then 
            return player 
        end 
    end 
    return nil 
end 

-- Função para realizar o bang no jogador selecionado 
local function bangPlayer(target) 
    bangActive = true 
    while bangActive and target and target.Character do 
        local rootPart = target.Character:FindFirstChild("HumanoidRootPart") 
        if rootPart then 
            -- Posiciona um pouco atrás do jogador 
            LocalPlayer.Character.HumanoidRootPart.CFrame = rootPart.CFrame * CFrame.new(0, 0, 1.3) 
            wait(0.08) 

            -- Move-se levemente para frente (mas sem ultrapassar o jogador) 
            LocalPlayer.Character.HumanoidRootPart.CFrame = rootPart.CFrame * CFrame.new(0, 0, 1.6) 
            wait(0.08) 
        else 
            break 
        end 
    end 
end 

-- Função para ativar/desativar o Bang 
local function ToggleBang(state) 
    bangActive = state 
    if state then 
        local player = findPlayerByName(SelectedPlayer) 
        if player then 
            bangPlayer(player) 
        else 
            print("Jogador não encontrado.") 
            bangActive = false 
        end 
    end 
end 

-- Input para selecionar o jogador 
local PlayerInput = Tabs.Player:AddInput("PlayerInput", { 
    Title = "Nome ou Display Name", 
    Placeholder = "Digite as iniciais...", 
    Callback = function(value) 
        SelectedPlayer = value 
    end 
}) 

-- Toggle para ativar/desativar o Bang 
local BangToggle = Tabs.Player:AddToggle("BangToggle", { 
    Title = "Comer jogador", 
    Default = false, 
    Callback = function(state) 
        ToggleBang(state) 
    end 
}) 

local Players = game:GetService("Players") 
local LocalPlayer = Players.LocalPlayer 
local backpackActive = false 
local SelectedPlayer = nil 

-- Função para encontrar o jogador pelo nome 
local function findPlayerByName(name) 
    for _, player in pairs(Players:GetPlayers()) do 
        if player.Name:lower():sub(1, #name) == name:lower() or player.DisplayName:lower():sub(1, #name) == name:lower() then 
            return player 
        end 
    end 
    return nil 
end 

-- Função para reproduzir animação de sentar 
local function PlaySitAnimation() 
    local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") 
    if humanoid then 
        local anim = Instance.new("Animation") 
        anim.AnimationId = "rbxassetid://2825744402" -- ID da animação de sentar 
        local track = humanoid:LoadAnimation(anim) 
        track:Play() 
        return track 
    end 
    return nil 
end 

-- Função para posicionar o personagem local na altura da cintura do jogador selecionado 
local function backpackPlayer(target) 
    local animTrack = PlaySitAnimation() -- Ativa a animação de sentar 
    backpackActive = true 
    local offsetDirection = 1 -- Direção do movimento (para frente e para trás) 

    -- Ativa o PlatformStand para evitar que o personagem caia 
    local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid") 
    if humanoid then 
        humanoid.PlatformStand = true 
    end 

    while backpackActive and target and target.Character do 
        local rootPart = target.Character:FindFirstChild("HumanoidRootPart") 
        if rootPart then 
            -- Calcula a posição para colocar a cabeça do personagem local na altura da cintura do jogador alvo 
            LocalPlayer.Character.HumanoidRootPart.CFrame = rootPart.CFrame * CFrame.new(0, -1.5, 0.5 * offsetDirection) * CFrame.Angles(0, math.pi, 0) 

            -- Alterna a direção para frente e para trás 
            offsetDirection = -offsetDirection 
            wait(0.1) 
        else 
            break 
        end 
    end 

        -- Para a animação e desativa o PlatformStand quando desativar o backpack 
    if animTrack then 
        animTrack:Stop() 
    end 
    if humanoid then 
        humanoid.PlatformStand = false 
    end 
end 

-- Função para ativar/desativar o "backpack" 
local function ToggleBackpack(state) 
    backpackActive = state 
    if state then 
        local player = findPlayerByName(SelectedPlayer) 
        if player then 
            backpackPlayer(player) 
        else 
            print("Jogador não encontrado.") 
            backpackActive = false 
        end 
    else 
        backpackActive = false 
    end 
end 

-- Input para selecionar o jogador 
local PlayerInput = Tabs.Player:AddInput("PlayerInput", { 
    Title = "Nome ou Display Name", 
    Placeholder = "Digite as iniciais...", 
    Callback = function(value) 
        SelectedPlayer = value 
    end 
}) 

-- Toggle para ativar/desativar o "backpack" 
local BackpackToggle = Tabs.Player:AddToggle("BackpackToggle", { 
    Title = "Mamar jogador", 
    Default = false, 
    Callback = function(state) 
        ToggleBackpack(state) 
    end 
}) 

local Players = game:GetService("Players") 
local LocalPlayer = Players.LocalPlayer 
local SelectedPlayer 
local gogogoActive = false 

-- Função para encontrar o jogador com base nas iniciais, parte do nome ou display name 
local function findPlayerByName(query) 
    for _, player in pairs(Players:GetPlayers()) do 
        if player.Name:lower():find(query:lower()) or player.DisplayName:lower():find(query:lower()) then 
            return player 
        end 
    end 
    return nil 
end 

-- Função para obter a raiz do jogador 
local function GetRoot(player) 
    return player.Character and player.Character:FindFirstChild("HumanoidRootPart") 
end 

-- Função para reproduzir animação 
local function PlayAnim(animationId) 
    local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") 
    if humanoid then 
        local anim = Instance.new("Animation") 
        anim.AnimationId = "rbxassetid://" .. animationId 
        local track = humanoid:LoadAnimation(anim) 
        track:Play(0, 1, 1) 
        return track 
    end 
    return nil 
end 

-- Função para parar animação 
local function StopAnim(track) 
    if track then 
        track:Stop() 
    end 
end 

-- Função para realizar o "bang" entre o torso e a cintura do jogador selecionado 
local function gogogoPlayer(target) 
    local player = target -- Define o jogador alvo 
    local animTrack = PlayAnim(7202900159) -- Reproduz a animação 

    if player then 
        local root = GetRoot(LocalPlayer) 
        local otherRoot = GetRoot(player) 

        if root and otherRoot then 
            -- Ativa o estado de ancoragem para o personagem local 
            root.Anchored = true 

            -- Desativa a gravidade do personagem 
            local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid") 
            if humanoid then 
                humanoid.PlatformStand = true -- Impede que o personagem caia 
            end 

            repeat 
                -- Calcula a posição entre o torso e a cintura do jogador e o faz "olhar" diretamente para o jogador 
                local lookAtPosition = otherRoot.Position + Vector3.new(0, 1, 0) 
                root.CFrame = CFrame.new(otherRoot.Position + otherRoot.CFrame.LookVector * 1.5 - Vector3.new(0, 0.5, 0), lookAtPosition) 

                -- Alterna a posição para frente e para trás 
                for i = -0.1, 0.1, 0.05 do 
                    root.CFrame = CFrame.new(otherRoot.Position + otherRoot.CFrame.LookVector * (1.5 + i) - Vector3.new(0, 0.5, 0), lookAtPosition) 
                    task.wait(0.1) 
                end 
            until not gogogoActive -- Continua até que o "bang" seja desativado 

            StopAnim(animTrack) -- Para a animação 

            -- Desativa o estado de ancoragem após a ação 
            root.Anchored = false 
            humanoid.PlatformStand = false -- Restaura a gravidade do personagem 
        end 
    end 
end 

-- Função para ativar/desativar o "bang" 
local function ToggleGogogo(state) 
    gogogoActive = state 
    if state then 
        local player = findPlayerByName(SelectedPlayer) 
        if player then 
            gogogoPlayer(player) 
        else 
            print("Jogador não encontrado.") 
            gogogoActive = false 
        end 
    end 
end 

-- Input para selecionar o jogador 
local PlayerInput = Tabs.Player:AddInput("PlayerInput", { 
    Title = "Nome ou Display Name", 
    Placeholder = "Digite as iniciais...", 
    Callback = function(value) 
        SelectedPlayer = value 
    end 
}) 

-- Toggle para ativar/desativar o "bang" 
local GogogoToggle = Tabs.Player:AddToggle("GogogoToggle", { 
    Title = "Dar o bozó", 
    Default = false, 
    Callback = function(state) 
        ToggleGogogo(state) 
    end 
}) 

-- Função para fazer o personagem deitar
local function Sleep()
    local humanoid = game.Players.LocalPlayer.Character:FindFirstChild("Humanoid")
    if humanoid then
        humanoid:ChangeState(Enum.HumanoidStateType.Physics) -- Desativa o movimento
        humanoid.JumpPower = 50 -- Garante que o pulo continue normal
        local rootPart = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            rootPart.CFrame = rootPart.CFrame * CFrame.Angles(math.rad(90), 0, 0) -- Rotaciona o personagem para deitar
        end
    end
end

-- Função para restaurar o estado normal
local function ResetToNormal()
    local humanoid = game.Players.LocalPlayer.Character:FindFirstChild("Humanoid")
    if humanoid then
        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp) -- Volta o personagem ao estado normal
        humanoid.JumpPower = 50 -- Garante que o pulo volte ao padrão
    end
end

-- Evento para detectar quando o jogador pula
game:GetService("UserInputService").JumpRequest:Connect(function()
    ResetToNormal()
end)

-- Botão para ativar o "Dormir"
Tabs.Player:AddButton({
    Title = "Dormir",
    Description = "Faz o personagem deitar no chão.",
    Callback = function()
        Sleep()
    end
})

local ESPSection = Tabs.Visuals:AddSection("ESP")

        local SmartESPToggle = ESPSection:AddToggle("SmartESP", { Title = "Smart ESP", Description = "Does not ESP the Whitelisted Players", Default = Configuration.SmartESP })
        SmartESPToggle:OnChanged(function(Value)
            Configuration.SmartESP = Value
        end)

        if IsComputer then
            local ESPKeybind = ESPSection:AddKeybind("ESPKey", {
                Title = "ESP Key",
                Description = "Changes the ESP Key",
                Default = Configuration.ESPKey,
                ChangedCallback = function(Value)
                    Configuration.ESPKey = Value
                end
            })
            Configuration.ESPKey = ESPKeybind.Value ~= "RMB" and Enum.KeyCode[ESPKeybind.Value] or Enum.UserInputType.MouseButton2
        end

        local ESPBoxToggle = ESPSection:AddToggle("ESPBox", { Title = "ESP Box", Description = "Creates the ESP Box around the Players", Default = Configuration.ESPBox })
        ESPBoxToggle:OnChanged(function(Value)
            Configuration.ESPBox = Value
            if not IsComputer then
                if Value then
                    ShowingESP = true
                elseif not Configuration.ESPBox and not Configuration.NameESP and not Configuration.HealthESP and not Configuration.MagnitudeESP and not Configuration.TracerESP then
                    ShowingESP = false
                end
            end
        end)

        local ESPBoxFilledToggle = ESPSection:AddToggle("ESPBoxFilled", { Title = "ESP Box Filled", Description = "Makes the ESP Box Filled", Default = Configuration.ESPBoxFilled })
        ESPBoxFilledToggle:OnChanged(function(Value)
            Configuration.ESPBoxFilled = Value
        end)

        local NameESPToggle = ESPSection:AddToggle("NameESP", { Title = "Name ESP", Description = "Creates the Name ESP above the Players", Default = Configuration.NameESP })
        NameESPToggle:OnChanged(function(Value)
            Configuration.NameESP = Value
            if not IsComputer then
                if Value then
                    ShowingESP = true
                elseif not Configuration.ESPBox and not Configuration.NameESP and not Configuration.HealthESP and not Configuration.MagnitudeESP and not Configuration.TracerESP then
                    ShowingESP = false
                end
            end
        end)

        ESPSection:AddDropdown("NameESPFont", {
            Title = "Name ESP Font",
            Description = "Changes the Name ESP Font",
            Values = { "UI", "System", "Plex", "Monospace" },
            Default = Configuration.NameESPFont,
            Callback = function(Value)
                Configuration.NameESPFont = Value
            end
        })

        ESPSection:AddSlider("NameESPSize", {
            Title = "Name ESP Size",
            Description = "Changes the Name ESP Size",
            Default = Configuration.NameESPSize,
            Min = 8,
            Max = 28,
            Rounding = 1,
            Callback = function(Value)
                Configuration.NameESPSize = Value
            end
        })

        ESPSection:AddColorpicker("NameESPOutlineColour", {
            Title = "Name ESP Outline",
            Description = "Changes the Name ESP Outline Colour",
            Default = Configuration.NameESPOutlineColour,
            Callback = function(Value)
                Configuration.NameESPOutlineColour = Value
            end
        })

        local HealthESPToggle = ESPSection:AddToggle("HealthESP", { Title = "Health ESP", Description = "Creates the Health ESP in the ESP Box", Default = Configuration.HealthESP })
        HealthESPToggle:OnChanged(function(Value)
            Configuration.HealthESP = Value
            if not IsComputer then
                if Value then
                    ShowingESP = true
                elseif not Configuration.ESPBox and not Configuration.NameESP and not Configuration.HealthESP and not Configuration.MagnitudeESP and not Configuration.TracerESP then
                    ShowingESP = false
                end
            end
        end)

        local MagnitudeESPToggle = ESPSection:AddToggle("MagnitudeESP", { Title = "Magnitude ESP", Description = "Creates the Magnitude ESP in the ESP Box", Default = Configuration.MagnitudeESP })
        MagnitudeESPToggle:OnChanged(function(Value)
            Configuration.MagnitudeESP = Value
            if not IsComputer then
                if Value then
                    ShowingESP = true
                elseif not Configuration.ESPBox and not Configuration.NameESP and not Configuration.HealthESP and not Configuration.MagnitudeESP and not Configuration.TracerESP then
                    ShowingESP = false
                end
            end
        end)

        local TracerESPToggle = ESPSection:AddToggle("TracerESP", { Title = "Tracer ESP", Description = "Creates the Tracer ESP in the direction of the Players", Default = Configuration.TracerESP })
        TracerESPToggle:OnChanged(function(Value)
            Configuration.TracerESP = Value
            if not IsComputer then
                if Value then
                    ShowingESP = true
                elseif not Configuration.ESPBox and not Configuration.NameESP and not Configuration.HealthESP and not Configuration.MagnitudeESP and not Configuration.TracerESP then
                    ShowingESP = false
                end
            end
        end)

        ESPSection:AddSlider("ESPThickness", {
            Title = "ESP Thickness",
            Description = "Changes the ESP Thickness",
            Default = Configuration.ESPThickness,
            Min = 1,
            Max = 10,
            Rounding = 1,
            Callback = function(Value)
                Configuration.ESPThickness = Value
            end
        })

        ESPSection:AddSlider("ESPOpacity", {
            Title = "ESP Opacity",
            Description = "Changes the ESP Opacity",
            Default = Configuration.ESPOpacity,
            Min = 0.1,
            Max = 1,
            Rounding = 1,
            Callback = function(Value)
                Configuration.ESPOpacity = Value
            end
        })

        ESPSection:AddColorpicker("ESPColour", {
            Title = "ESP Colour",
            Description = "Changes the ESP Colour",
            Default = Configuration.ESPColour,
            Callback = function(Value)
                Configuration.ESPColour = Value
            end
        })

        local ESPUseTeamColourToggle = ESPSection:AddToggle("ESPUseTeamColour", { Title = "Use Team Colour", Description = "Makes the ESP Colour match the Target Player Team", Default = Configuration.ESPUseTeamColour })
        ESPUseTeamColourToggle:OnChanged(function(Value)
            Configuration.ESPUseTeamColour = Value
        end)

        local VisualsSection = Tabs.Visuals:AddSection("Visuals")

        local RainbowVisualsToggle = VisualsSection:AddToggle("RainbowVisuals", { Title = "Rainbow Visuals", Description = "Makes the Visuals Rainbow", Default = Configuration.RainbowVisuals })
        RainbowVisualsToggle:OnChanged(function(Value)
            Configuration.RainbowVisuals = Value
        end)

        VisualsSection:AddSlider("RainbowDelay", {
            Title = "Rainbow Delay",
            Description = "Changes the Rainbow Delay",
            Default = Configuration.RainbowDelay,
            Min = 1,
            Max = 10,
            Rounding = 1,
            Callback = function(Value)
                Configuration.RainbowDelay = Value
            end
        })
    else
        ShowWarning = true
    end

-- Addons: 
-- SaveManager (Allows you to have a configuration system) 
-- InterfaceManager (Allows you to have a interface managment system) 

-- Hand the library over to our managers 
SaveManager:SetLibrary(Fluent) 
InterfaceManager:SetLibrary(Fluent) 

-- Ignore keys that are used by ThemeManager. 
-- (we dont want configs to save themes, do we?) 
SaveManager:IgnoreThemeSettings() 

-- You can add indexes of elements the save manager should ignore 
SaveManager:SetIgnoreIndexes({}) 

-- use case for doing it this way: 
-- a script hub could have themes in a global folder 
-- and game configs in a separate folder per game 
InterfaceManager:SetFolder("FluentScriptHub") 
SaveManager:SetFolder("FluentScriptHub/specific-game") 

InterfaceManager:BuildInterfaceSection(Tabs.Esp) 
SaveManager:BuildConfigSection(Tabs.Esp) 


Window:SelectTab(1) 

Fluent:Notify({ 
    Title = "Blessed Hub", 
    Content = "Script carregado.", 
    Duration = 8 
}) 

-- You can use the SaveManager:LoadAutoloadConfig() to load a config 
-- which has been marked to be one that auto loads! 
SaveManager:LoadAutoloadConfig()#000000